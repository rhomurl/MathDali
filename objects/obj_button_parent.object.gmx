<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting variables
my_w2n_lvl=1; //Declaring Words to Numbers variable
my_n2w_lvl=1; //Declaring Number to Words variable
my_frac2dec_lvl=1; //Declaring Fraction to Decimal variable
my_placeval_lvl=1; //Declaring Place Value variable
my_roundoff_lvl=1; //Declaring Round Off variable

global.lesson = ""; //clear lesson 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level system
var hasEntered = false;

//Words to Numbers
if (room == room_w2n_level)
{
    if (global.level_w2n&gt;=my_w2n_lvl) 
    {
    locked=false
    } 
    else 
    {
    locked=true
    }
    if (locked) 
    {
        image_index=0 
        //mouse enter
        if position_meeting(mouse_x,mouse_y,self)
        {
        hasEntered = true;
        image_index=1 
        }
        //mouse leave
        if (!position_meeting(mouse_x,mouse_y,self) &amp;&amp; hasEntered)
        {
        image_index=0
        }
    }
    else 
    {
    image_index=2
    //mouse enter
        if position_meeting(mouse_x,mouse_y,self)
        {
        hasEntered = true;
        image_index=3 
        }
        //mouse leave
        if (!position_meeting(mouse_x,mouse_y,self) &amp;&amp; hasEntered)
        {
        image_index=2
        }
    }
    if (!locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_w2n_lvl==1 room_goto(rm_w2n_lvl1);
        if my_w2n_lvl==2 room_goto(rm_w2n_lvl2);
        if my_w2n_lvl==3 room_goto(rm_w2n_lvl3);
        if my_w2n_lvl==4 room_goto(rm_w2n_lvl4);
        if my_w2n_lvl==5 room_goto(rm_w2n_lvl5);
    }
     else if (locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if (my_w2n_lvl==1 || my_w2n_lvl==2 || my_w2n_lvl==3 || my_w2n_lvl==4 || my_w2n_lvl==5)
         instance_create(room_width/2,room_height/2, obj_dialog);
        /*show_message("Level locked!");*/
    }
}

///Number to Words
if (room == room_n2w_level)
{
    if (global.level_n2w&gt;=my_n2w_lvl) 
    {
    locked=false
    } 
    else 
    {
    locked=true
    }
    if locked image_index=0 else image_index=1
    if (!locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_n2w_lvl==1 room_goto(rm_n2w_lvl1);
        if my_n2w_lvl==2 room_goto(rm_n2w_lvl2);
        if my_n2w_lvl==3 room_goto(rm_n2w_lvl3);
        if my_n2w_lvl==4 room_goto(rm_n2w_lvl4);
        if my_n2w_lvl==5 room_goto(rm_n2w_lvl5);
    }
    else if (locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_n2w_lvl==1 || my_n2w_lvl==2 || my_n2w_lvl==3 || my_n2w_lvl==4 || my_n2w_lvl==5 show_message("Level locked!");
    }
}

//Place Value
if (room == room_pv_level)
{
    if (global.level_pv&gt;=my_placeval_lvl) 
    {
    locked=false
    } 
    else 
    {
    locked=true
    }
    if locked image_index=0 else image_index=1
    if (!locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_placeval_lvl==1 room_goto(rm_pv_lvl1);
        if my_placeval_lvl==2 room_goto(rm_pv_lvl2);
        if my_placeval_lvl==3 room_goto(rm_pv_lvl3);
        if my_placeval_lvl==4 room_goto(rm_pv_lvl4);
        if my_placeval_lvl==5 room_goto(rm_pv_lvl5);
    }
    else if (locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_placeval_lvl==1 || my_placeval_lvl==2 || my_placeval_lvl==3 || my_placeval_lvl==4 || my_placeval_lvl==5 show_message("Level locked!");
    }
}

//Round off
if (room == room_ro_level)
{
    if (global.level_ro&gt;=my_roundoff_lvl) 
    {
    locked=false
    } 
    else 
    {
    locked=true
    }
    if locked image_index=0 else image_index=1
    if (!locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_roundoff_lvl==1 room_goto(rm_ro_lvl1);
        if my_roundoff_lvl==2 room_goto(rm_ro_lvl2);
        if my_roundoff_lvl==3 room_goto(rm_ro_lvl3);
        if my_roundoff_lvl==4 room_goto(rm_ro_lvl4);
        if my_roundoff_lvl==5 room_goto(rm_ro_lvl5);
    }
    else if (locked &amp;&amp; position_meeting(mouse_x, mouse_y, id) &amp;&amp; mouse_check_button_released(mb_left))
    {
        if my_roundoff_lvl==1 || my_roundoff_lvl==2 || my_roundoff_lvl==3 || my_roundoff_lvl==4 || my_roundoff_lvl==5 show_message("Level locked!");
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw level numbers
draw_self();
draw_set_font(font_lock);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

//Draw level number &gt;&gt; first part
if (room == room_w2n_level) {
draw_set_colour(c_black);  
draw_text(x-1,y-1,my_w2n_lvl); //Draw number level number - Words to Number
}
else if (room == room_n2w_level) {
draw_set_colour(c_black);
draw_text(x-1,y-1,my_n2w_lvl); //Draw number level number - Number to Words
}
else if (room == room_pv_level) {
draw_set_colour(c_black);
draw_text(x-1,y-1,my_placeval_lvl); //Draw number level number - Place Value
}
else if (room == room_ro_level) {
draw_set_colour(c_black);
draw_text(x-1,y-1,my_roundoff_lvl); //Draw number level number - Round Off
}

//Draw level number &gt;&gt; second part
if (room == room_w2n_level) {
draw_set_colour(c_white); //shadow effect
draw_text(x,y,my_w2n_lvl); //Draw number level number - Words to Number
}
else if (room == room_n2w_level) {
draw_set_colour(c_white); //shadow effect
draw_text(x,y,my_n2w_lvl); //Draw number level number - Number to Words
}
else if (room == room_pv_level) {
draw_set_colour(c_white); //shadow effect
draw_text(x,y,my_placeval_lvl); //Draw number level number - Place Value
}
else if (room == room_ro_level) {
draw_set_colour(c_white); //shadow effect
draw_text(x,y,my_roundoff_lvl); //Draw number level number - Round Off
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
