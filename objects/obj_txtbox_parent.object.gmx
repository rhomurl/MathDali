<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rndoff_rnd = irandom(4);
string5 = "";
rnd_off = 0;
rnd_offa = 0;
rnd_offb = 0;
rnd_offc = 0;
rnd_offd = 0;
switch (rndoff_rnd) 
{
    case 0: 
    {
        rnd_off = 152678;
        string5 = "hundred thousands";
        rnd_offa = 200000; 
        rnd_offb = 160000;
        rnd_offc = 210000;
        rnd_offd = 100000;
        
        break;
    }
    case 1: 
    {
        rnd_off = 214563; 
        string5 = "hundred thousands";
        rnd_offa = 210000;
        rnd_offb = 200000; 
        rnd_offc = 214000;
        rnd_offd = 215000;
        break;
    }
    case 2: 
    {
        rnd_off = 13097564; 
        string5 = "millions";
        rnd_offa = 13110000;
        rnd_offb = 13100000;
        rnd_offc = 14000000;
        rnd_offd = 13000000; 
        break;
    }
    case 3: 
    {
        rnd_off = 4509873; 
        string5 = "hundred thousands";
        rnd_offa = 4511000;
        rnd_offb = 4000000;
        rnd_offc = 4500000; 
        rnd_offd = 5000000;
        break;
    }
    case 4: 
    {
        rnd_off = 6837145; 
        string5 = "millions";
        rnd_offa = 6800000;
        rnd_offb = 7000000; 
        rnd_offc = 6000000;
        rnd_offd = 6840000;
        break;
    }
    default: 
    {
        string5 = ""; rnd_off = rnd_offa = rnd_offb = rnd_offc = rnd_offd = 0;
    }
}











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* switch (rndoff_rnd) 
    {
        case 0:
        {
        if (position_meeting(mouse_x, mouse_y, obj_txtbox_roa) &amp;&amp; mouse_check_button_released(mb_left))
            {
                show_message("Correct!");
            }
        else if (mouse_check_button(mb_left) &amp;&amp; (position_meeting(x,y,obj_txtbox_rob)) ||
           (mouse_check_button(mb_left) &amp;&amp; position_meeting(x,y,obj_txtbox_roc)) ||
           (mouse_check_button(mb_left) &amp;&amp; position_meeting(x,y,obj_txtbox_rod)))
            {
                show_message("Wrong!");
            }
        break;
        }
        case 1:
        {
        if (position_meeting(mouse_x, mouse_y, obj_txtbox_rob) &amp;&amp; mouse_check_button_released(mb_left))
            {
                show_message("Correct!");
            }
        else if (mouse_check_button(mb_left) &amp;&amp; (position_meeting(x,y,obj_txtbox_roa)) || 
           (mouse_check_button(mb_left) &amp;&amp; position_meeting(x,y,obj_txtbox_roc)) || 
           (mouse_check_button(mb_left) &amp;&amp; position_meeting(x,y,obj_txtbox_rod)))
            {
                show_message("Wrong!");
            }
        break;
        }
        case 2:
        {
        if (position_meeting(mouse_x, mouse_y, obj_txtbox_rod) &amp;&amp; mouse_check_button_released(mb_left))
            {
                show_message("Correct!");
            }
        else if (mouse_check_button(mb_left) &amp;&amp; (position_meeting(x,y,obj_txtbox_roa)) || 
           (mouse_check_button(mb_left) &amp;&amp; position_meeting(x,y,obj_txtbox_rob)) || 
           (mouse_check_button(mb_left) &amp;&amp; position_meeting(x,y,obj_txtbox_roc)))
            {
                show_message("Wrong!");
            }
        break;
        }
        default: 
        {
        string5 = ""; rnd_off = rnd_offa = rnd_offb = rnd_offc = rnd_offd = 0;
        break;
        }
    }
     */
/*
switch (rndoff_rnd) 
{
    case 0: 
    {
        //rnd_off = 152678;
        //string5 = "Hundred thousands";
        //rnd_offa = 200000; 
        if (position_meeting(mouse_x, mouse_y, obj_txtbox_roa) &amp;&amp; mouse_check_button_released(mb_left))
        {
            show_message("Correct!");
        }
        else if 
        (position_meeting(mouse_x, mouse_y, obj_txtbox_rob) || 
        (position_meeting(mouse_x, mouse_y, obj_txtbox_roc) || 
        (position_meeting(mouse_x, mouse_y, obj_txtbox_rod) &amp;&amp; (mouse_check_button_released(mb_left))
        {
            show_message("Wrong!");
        }
        break;
    }
    case 1: 
    {
        //rnd_off = 214563; 
        //string5 = "Hundred thousands";
        //rnd_offb = 200000;
        if (position_meeting(mouse_x, mouse_y, obj_txtbox_rob) &amp;&amp; mouse_check_button_released(mb_left))
        {
            show_message("Correct!");
        }
         else if ((position_meeting(mouse_x, mouse_y, obj_txtbox_roa) || 
        (position_meeting(mouse_x, mouse_y, obj_txtbox_roc) || (position_meeting(mouse_x, mouse_y, obj_txtbox_rod)  
        &amp;&amp; mouse_check_button_released(mb_left))
        {
            show_message("Wrong!");
        }
        break;
    }
    case 2: 
    {
        //rnd_off = 13097564; 
        //string5 = "Millions";
        //rnd_offd = 13000000; 
        if (position_meeting(mouse_x, mouse_y, obj_txtbox_rod) &amp;&amp; mouse_check_button_released(mb_left))
        {
            show_message("Correct!");
        }
         else if ((position_meeting(mouse_x, mouse_y, obj_txtbox_rob) || 
        (position_meeting(mouse_x, mouse_y, obj_txtbox_roc) || (position_meeting(mouse_x, mouse_y, obj_txtbox_roa)  
        &amp;&amp; mouse_check_button_released(mb_left))
        {
            show_message("Wrong!");
        }
        break;
    }
    case 3: 
    {
        //rnd_off = 4509873; 
        //string5 = "Hundred thousands";
        //rnd_offc = 4500000; 
        if (mouse_check_button(mb_left) 
        and position_meeting(x,y,obj_txtbox_roc)) 
        {
            show_message("Correct!");
        }
        else if (mouse_check_button(mb_left) 
        and (position_meeting(x,y,obj_txtbox_roa) || 
        position_meeting(x,y,obj_txtbox_rob) || 
        position_meeting(x,y,obj_txtbox_rod))) 
        {
            show_message("Wrong!");
        }
        break;
    }
    case 4: 
    {
        //rnd_off = 6837145; 
        //string5 = "Millions";
        //rnd_offb = 7000000;
        if (mouse_check_button(mb_left) 
        and position_meeting(x,y,obj_txtbox_rob)) 
        {
            show_message("Correct!");
        }
        else if (mouse_check_button(mb_left) 
        and (position_meeting(x,y,obj_txtbox_roa) || 
        position_meeting(x,y,obj_txtbox_roc) || 
        position_meeting(x,y,obj_txtbox_rod))) 
        {
            show_message("Wrong!");
        } 
        break;
    }
    default: 
    {
        string5 = ""; rnd_off = rnd_offa = rnd_offb = rnd_offc = rnd_offd = 0;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//rnstr= "Round off " + real(rnd_off) + " to the nearest " + string(string5);
//rnstr2=" to ";
draw_set_font(f_txtbox_ro)
draw_set_color(c_white);
//draw_text(x+25, y+25, rnd_off);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
