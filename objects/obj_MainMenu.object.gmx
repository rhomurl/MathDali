<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MainMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set vars
selected = 0;
rot = 0;
item = 0;

//set the position of the menu
menu_x = room_width/2;
menu_y = room_height/2;

//set the size of the menu
menu_width = 400;
menu_height = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// left and right
if (keyboard_check_pressed(vk_right)) {
    selected += 1;
    audio_play_sound(switch_sound, 10, false);   
}
else if (keyboard_check_pressed(vk_left)) {
    selected -= 1;
    audio_play_sound(switch_sound, 10, false);
}

//Left pressed and Enter


//Rotate towards the selection
rot -= angleDifference(rot, selected*(360/image_number))/(0.2*room_speed);

// setting the item variable to image_index
item = -selected mod image_number;
if (item) &lt; 0 { item+=image_number; }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//set some vars
var pr, i;
i = 0;
pr = ds_priority_create();

//add menu items to the priority queue
repeat (image_number) {
    ds_priority_add(pr, i, lengthdir_y(1, (rot-90) +i*(360/image_number)));
    i+=1;
}

//draw the menu
repeat(image_number){
    i = ds_priority_delete_min(pr);
    draw_sprite_ext(sprite_index, 
    i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)),
     menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)), 
     1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2), 
     1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1); 
}

//remove ds priority 
ds_priority_destroy(pr);


switch(item){
    case 0: text = "Play" break;
    case 1: text = "Help" break;
    case 2: text = "Sound" break;
    case 3: text = "Exit" break;
    default: text = "" break;

}

//draw text based on what item you have
var text;
draw_set_font(f_default);
draw_set_halign(fa_center);
draw_text(512,256,text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (mouse_check_button_pressed(mb_left) || keyboard_check(vk_enter)){
switch(item){
    case 0: 
        ini_open("savedata.ini"); //open file savedata.ini
        global.highscore = ini_read_real("score", "highscore", 0);
        //set global.highscore to value or set as 0 if no value present
        ini_close(); //close ini file - always do this after loading or saving data
        //set starting values for game:
        score=0;
        lives=5;    
    room_goto_next(); break;
    case 1: room_goto(help_room); break;
    case 2: show_message("Sound not available") break;
    case 3: game_end(); break;
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
